/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VerifyIndexImport } from './routes/verify/index'
import { Route as TermsIndexImport } from './routes/terms/index'
import { Route as ResetPasswordIndexImport } from './routes/reset-password/index'
import { Route as RegisterIndexImport } from './routes/register/index'
import { Route as PublicIndexImport } from './routes/public/index'
import { Route as PrivacyIndexImport } from './routes/privacy/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ForgotPasswordIndexImport } from './routes/forgot-password/index'
import { Route as AccountSecurityIndexImport } from './routes/account/security/index'
import { Route as AccountProfileIndexImport } from './routes/account/profile/index'
import { Route as AccountPreferencesIndexImport } from './routes/account/preferences/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VerifyIndexRoute = VerifyIndexImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => rootRoute,
} as any)

const TermsIndexRoute = TermsIndexImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordIndexRoute = ResetPasswordIndexImport.update({
  id: '/reset-password/',
  path: '/reset-password/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/public/',
  path: '/public/',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyIndexRoute = PrivacyIndexImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordIndexRoute = ForgotPasswordIndexImport.update({
  id: '/forgot-password/',
  path: '/forgot-password/',
  getParentRoute: () => rootRoute,
} as any)

const AccountSecurityIndexRoute = AccountSecurityIndexImport.update({
  id: '/account/security/',
  path: '/account/security/',
  getParentRoute: () => rootRoute,
} as any)

const AccountProfileIndexRoute = AccountProfileIndexImport.update({
  id: '/account/profile/',
  path: '/account/profile/',
  getParentRoute: () => rootRoute,
} as any)

const AccountPreferencesIndexRoute = AccountPreferencesIndexImport.update({
  id: '/account/preferences/',
  path: '/account/preferences/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password/': {
      id: '/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/privacy/': {
      id: '/privacy/'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyIndexImport
      parentRoute: typeof rootRoute
    }
    '/public/': {
      id: '/public/'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/reset-password/': {
      id: '/reset-password/'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexImport
      parentRoute: typeof rootRoute
    }
    '/verify/': {
      id: '/verify/'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof VerifyIndexImport
      parentRoute: typeof rootRoute
    }
    '/account/preferences/': {
      id: '/account/preferences/'
      path: '/account/preferences'
      fullPath: '/account/preferences'
      preLoaderRoute: typeof AccountPreferencesIndexImport
      parentRoute: typeof rootRoute
    }
    '/account/profile/': {
      id: '/account/profile/'
      path: '/account/profile'
      fullPath: '/account/profile'
      preLoaderRoute: typeof AccountProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/account/security/': {
      id: '/account/security/'
      path: '/account/security'
      fullPath: '/account/security'
      preLoaderRoute: typeof AccountSecurityIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordIndexRoute
  '/login': typeof LoginIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/public': typeof PublicIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reset-password': typeof ResetPasswordIndexRoute
  '/terms': typeof TermsIndexRoute
  '/verify': typeof VerifyIndexRoute
  '/account/preferences': typeof AccountPreferencesIndexRoute
  '/account/profile': typeof AccountProfileIndexRoute
  '/account/security': typeof AccountSecurityIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordIndexRoute
  '/login': typeof LoginIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/public': typeof PublicIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reset-password': typeof ResetPasswordIndexRoute
  '/terms': typeof TermsIndexRoute
  '/verify': typeof VerifyIndexRoute
  '/account/preferences': typeof AccountPreferencesIndexRoute
  '/account/profile': typeof AccountProfileIndexRoute
  '/account/security': typeof AccountSecurityIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/forgot-password/': typeof ForgotPasswordIndexRoute
  '/login/': typeof LoginIndexRoute
  '/privacy/': typeof PrivacyIndexRoute
  '/public/': typeof PublicIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/reset-password/': typeof ResetPasswordIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/verify/': typeof VerifyIndexRoute
  '/account/preferences/': typeof AccountPreferencesIndexRoute
  '/account/profile/': typeof AccountProfileIndexRoute
  '/account/security/': typeof AccountSecurityIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/privacy'
    | '/public'
    | '/register'
    | '/reset-password'
    | '/terms'
    | '/verify'
    | '/account/preferences'
    | '/account/profile'
    | '/account/security'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/privacy'
    | '/public'
    | '/register'
    | '/reset-password'
    | '/terms'
    | '/verify'
    | '/account/preferences'
    | '/account/profile'
    | '/account/security'
  id:
    | '__root__'
    | '/'
    | '/forgot-password/'
    | '/login/'
    | '/privacy/'
    | '/public/'
    | '/register/'
    | '/reset-password/'
    | '/terms/'
    | '/verify/'
    | '/account/preferences/'
    | '/account/profile/'
    | '/account/security/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordIndexRoute: typeof ForgotPasswordIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  PrivacyIndexRoute: typeof PrivacyIndexRoute
  PublicIndexRoute: typeof PublicIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  ResetPasswordIndexRoute: typeof ResetPasswordIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
  VerifyIndexRoute: typeof VerifyIndexRoute
  AccountPreferencesIndexRoute: typeof AccountPreferencesIndexRoute
  AccountProfileIndexRoute: typeof AccountProfileIndexRoute
  AccountSecurityIndexRoute: typeof AccountSecurityIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordIndexRoute: ForgotPasswordIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  PrivacyIndexRoute: PrivacyIndexRoute,
  PublicIndexRoute: PublicIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  ResetPasswordIndexRoute: ResetPasswordIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  VerifyIndexRoute: VerifyIndexRoute,
  AccountPreferencesIndexRoute: AccountPreferencesIndexRoute,
  AccountProfileIndexRoute: AccountProfileIndexRoute,
  AccountSecurityIndexRoute: AccountSecurityIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/forgot-password/",
        "/login/",
        "/privacy/",
        "/public/",
        "/register/",
        "/reset-password/",
        "/terms/",
        "/verify/",
        "/account/preferences/",
        "/account/profile/",
        "/account/security/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/forgot-password/": {
      "filePath": "forgot-password/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/privacy/": {
      "filePath": "privacy/index.tsx"
    },
    "/public/": {
      "filePath": "public/index.tsx"
    },
    "/register/": {
      "filePath": "register/index.tsx"
    },
    "/reset-password/": {
      "filePath": "reset-password/index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/verify/": {
      "filePath": "verify/index.tsx"
    },
    "/account/preferences/": {
      "filePath": "account/preferences/index.tsx"
    },
    "/account/profile/": {
      "filePath": "account/profile/index.tsx"
    },
    "/account/security/": {
      "filePath": "account/security/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
