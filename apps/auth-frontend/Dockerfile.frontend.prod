FROM node:22-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy root package.json and workspace files
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml ./

# Copy shared packages
COPY packages/shared/package.json ./packages/shared/package.json
COPY packages/eslint-config/package.json ./packages/eslint-config/package.json

# Copy frontend app
COPY apps/auth-frontend/package.json ./apps/auth-frontend/package.json

# Install root dependencies (only)
RUN pnpm install --frozen-lockfile

# Build stage
FROM base AS builder

# Copy all files
COPY . .

# Build shared packages first
RUN pnpm --filter @roll-your-own-auth/shared run build

# Build the frontend app with build secrets
RUN --mount=type=secret,id=VITE_BASE_API_URL \
    VITE_BASE_API_URL=$(cat /run/secrets/VITE_BASE_API_URL) \
    pnpm --filter @roll-your-own-auth/web run build

# Production stage
FROM node:22-alpine AS production

WORKDIR /app

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nodeuser

# Install curl for healthcheck
RUN apk --no-cache add curl

# Install a static file server
RUN npm install -g serve

# Copy built assets from builder
COPY --from=builder /app/apps/auth-frontend/dist /app/dist
COPY --from=builder /app/apps/auth-frontend/package.json /app/package.json

# Change ownership of app files to non-root user
RUN chown -R nodeuser:nodejs /app

# Switch to non-root user
USER nodeuser

# Expose port 3000
EXPOSE 3000

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Start the static server with standard port
CMD ["serve", "-s", "dist", "-l", "3000"]
